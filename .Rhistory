library(shinyWidgets)
install.packages("shinyWidgets")
q()
library(Hmisc)
?binconf
x <= 34
x <- 34
n <- 100
ci <- .95
dp <- 2
binconf(x, n, ci, dp)
binconf(x, n, ci)
shiny::runApp('apps/CIproportion')
runApp('apps/CIproportion')
str(binconf(34, 100))
runApp('apps/CIproportion')
binconf(34, 100)[1,]
binconf(34, 100)[1,2]
tmp <- binconf(34, 100)[1,]
tmp[1]
tmp[2]
tmp[3]
runApp('apps/CIproportion')
tmp <- binconf(34, 100)[1,]
tmp
runApp('apps/CIproportion')
runApp('apps/Cronbach1Feldt')
library(tidyverse)
library(flextable)
?sample
sample((1:34*4)/4, 12)
sample((1:34*4)/24, 12)
sample((1:34*4)/24, 12) %>%
as_tibble() %>%
rename(score = value) %>%
mutate(score = round(score, 1))
set.seed(12345)
sample((1:34*4)/24, 12) %>%
as_tibble() %>%
rename(score = value) %>%
mutate(score = round(score, 1))
?rank
?order
order(1:5)
order(5:1)
(ii <- order(x <- c(1,1,3:1,1:4,3), y <- c(9,9:1), z <- c(2,1:9)))
sample((1:34*4)/24, 12) %>%
as_tibble() %>%
rename(score = value) %>%
mutate(score = round(score, 1),
rank = )
sample((1:34*4)/24, 12) %>%
as_tibble() %>%
rename(score = value) %>%
mutate(score = round(score, 1),
rank = order(score))
sample((1:34*4)/24, 12) %>%
as_tibble() %>%
rename(score = value) %>%
mutate(score = round(score, 1),
rank = order(score)) %>%
arrange(score)
tmp <- c(1,1,3:1,1:4,3)
tmp
order(tmp)
rank(tmp)
sample((1:34*4)/24, 12) %>%
as_tibble() %>%
rename(score = value) %>%
mutate(score = round(score, 1),
rank = rank(score)) %>%
arrange(score)
sample((1:34*4)/24, 12) %>%
as_tibble() %>%
rename(score = value) %>%
mutate(score = round(score, 1),
rank = rank(score)) -> tmpTib
flextable(tmpTib)
tmpTib %>%
arrange(score) %>%
flextable()
set.seed(12345)
sample((1:34*4)/34, 12) %>%
as_tibble() %>%
rename(score = value) %>%
mutate(score = round(score, 1),
rank = rank(score)) -> tmpTib
flextable(tmpTib)
tmpTib %>%
arrange(score) %>%
flextable()
c(tmpVec, 1.3, 3.1, 3.3, 3.3) %>%
as_tibble() %>%
rename(score = value) %>%
mutate(score = round(score, 1),
rank = rank(score)) -> tmpTib2
tmpTib %>%
select(score) %>%
pull(scores) -> tmpVec
c(tmpVec, 1.3, 3.1, 3.3, 3.3) %>%
as_tibble() %>%
rename(score = value) %>%
mutate(score = round(score, 1),
rank = rank(score)) -> tmpTib2
tmpTib %>%
select(score) %>%
pull(scores) -> tmpVec
tmpTib %>%
select(score) %>%
pull(score) -> tmpVec
c(tmpVec, 1.3, 3.1, 3.3, 3.3) %>%
as_tibble() %>%
rename(score = value) %>%
mutate(score = round(score, 1),
rank = rank(score)) -> tmpTib2
flextable(tmpTib2)
tmpTib2
tmpTib2[16,]
c(tmpVec, 1.3, 3.1, 3.3, 3.3) %>%
as_tibble() %>%
rename(score = value) %>%
mutate(score = round(score, 1),
rankMean = round(rank(score, method = "average"), 2),
rankFirst = rank(score, method = "first"),
rankLast = rank(score, method = "last"),
ranMin = rank(score, method = "min"),
rankMax = rank(score, method = "max")) -> tmpTib2
c(tmpVec, 1.3, 3.1, 3.3, 3.3) %>%
as_tibble() %>%
rename(score = value) %>%
mutate(score = round(score, 1),
# rankMean = round(rank(score, method = "average"), 2),
rankFirst = rank(score, method = "first"),
rankLast = rank(score, method = "last"),
ranMin = rank(score, method = "min"),
rankMax = rank(score, method = "max")) -> tmpTib2
c(tmpVec, 1.3, 3.1, 3.3, 3.3) %>%
as_tibble() %>%
rename(score = value) %>%
mutate(score = round(score, 1),
rankMean = round(rank(score, ties.method = "average"), 2),
rankFirst = rank(score, ties.method = "first"),
rankLast = rank(score, ties.method = "last"),
ranMin = rank(score, ties.method = "min"),
rankMax = rank(score, ties.method = "max")) -> tmpTib2
flextable(tmpTib2)
rank(c(1, 2, 2, 3, 3, 3, 4, 5))
round(rank(c(1, 2, 2, 3, 3, 3, 4, 5)), 4)
sprintf(rank(c(1, 2, 2, 3, 3, 3, 4, 5)), "%4.3f")
sprintf("%4.3f", rank(c(1, 2, 2, 3, 3, 3, 4, 5)))
?sprintf
sprintf("%4.3f", 1/3)
sprintf("%4.3f", base::rank(c(1, 2, 2, 3, 3, 3, 4, 5)))
x2 <- c(3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5)
rank(x2)
x3 <- c(x2, 3)
rank(x3)
shiny::runApp('apps/CIcorrelation')
library(ExactCIdiff)
?BinomCI
BinomCI(5,5,4,2,conf.level=0.95,CItype='Two.sided')
BinomCI(5,5,40,20,conf.level=0.95,CItype='Two.sided')
BinomCI(50,50,4,2,conf.level=0.95,CItype='Two.sided')
?prop.test
?prop.test(34, 100)
prop.test(34, 100)
BinomCI(5,5,40,20,conf.level=0.95,CItype='Two.sided')
BinomCI(5,5,4,2,conf.level=0.95,CItype='Two.sided')
smokers  <- c( 83, 90, 129, 70 )
patients <- c( 86, 93, 136, 82 )
prop.test(smokers, patients)
?twoby2
??twoby2
shiny::runApp('apps/CIdiff2proportions')
runApp('apps/CIdiff2proportions')
