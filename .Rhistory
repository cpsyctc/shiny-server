# setwd("C:/Users/weoxi/Documents/CPA CORE") # I've replaced with mine, switch back if using for you (of course!)
setwd("/media/chris/Clevo_SSD2/Data/CORE/translations/SPA_other/Clara/Our_papers/2022_YP-CORE_paper")
options(width=120) # make enough space for listing of data
### I've replaced all your " <- ", " <- " and " <- " to get consistent " <- "
CSocioNDUP <- readxl::read_excel("YPsociod.xlsx")
### for future, I try to keep " <- " for very simple assignments and to use " -> " for anything more complex
### makes it easier to find where things are constructed with a single search for " -> "
CSocioNDUP <- CSocioNDUP %>%
filter(session != "NA") %>%
filter(nombres != "NA") %>%
mutate_at(vars(created, modified, ended), as.Date, format="%Y-%m-%d")
#mutate(countdays = as.numeric(ended-created))
#CSocioNDUP <- CSocioNDUP %>%
#mutate(ended = as.Date(ended, origin = "1899-12-30"))
#ncompletions= number of times the participant completed the tests
#completionN = indicator of the time that the test was completed (e.g., first, second..)
YPCORE23 <- readxl::read_excel("YPCORE23.xlsx")
#("YPdata.xlsx")
### I've done the same thing as I did with "<-" for "%>%" and " -> " to get all the spacing the same
### the basic rule for the R tidyverse style guid that I try to follow is to put a single space either side of any operator
YPCORE23 %>%
filter(session != "NA") %>%
filter(ended != "NA") %>%
mutate_at(vars(created, modified, ended), as.Date, as.Date, format="%Y-%m-%d") %>%
#mutate(countdays = as.numeric(ended-created)) %>%
group_by(session) %>%
mutate(completionN = row_number(),
nCompletions = n()) %>%
ungroup() -> YPCORE23
#library(lubridate)
#YPCORE23$ended <- parse_date_time(YPCORE23$ended, orders = c("%Y-%m-%d", "%d/%m/%Y"))
### I've wrapped this a bit.  I wrap all dplyr "pipes"
### I didn't change the RTL assignation but I would for future work
### the other thing I try to do now when sharing code is to put a comment when I create a new tibble
### e.g. "Making YPCORE from YPCORE by recoding YP-CORE items"
YPCORE <- YPCORE23 %>%
### I think mutate_at is deprecated now in favour of using across()
mutate_at(c("YP1","YP2","YP3","YP4","YP5","YP6","YP7","YP8","YP9","YP10"),
funs(recode(., '1'='0', '2'='1', '3'='2', '4'='3', '5'='4')))
### I am less obsessional about notes for things like this and I would just have piped straight
### from the last into this so all the recoing is in one dplyr pipeline
YPCORE %>%
mutate_at(c("YP1","YP2","YP3","YP4","YP5","YP6","YP7","YP8","YP9","YP10"), as.numeric) -> YPCORE
### so I'd have piped straight on her
YPCORE %>%
### I try to put a comment when removing variables and definitely when filtering rows
select(!ends_with("NOR")) %>%
mutate(YP3 = revScoreCORE(YP3),
YP5 = revScoreCORE(YP5),
YP10 = revScoreCORE(YP10)) %>%
mutate(COREtotal = scoreFun2(select(., contains("YP"))),
CORErisk = scoreFun2(select(., all_of(itemsCORErisk))),
COREnr= scoreFun2(select(., all_of(itemsCOREnr)))) %>%
mutate_at(vars(COREtotal, CORErisk, COREnr), ~ . * 10) -> YP_COREX
### When sharing code definitely put a comment where we create a new tibble with a join of any sort
CSocioNDUP %>%
full_join(YP_COREX, by= c("session"), keep = TRUE) -> YP_repeated
### good old fashionsed base R, I would use a tidyverse pipe now
### I would also put a comment at the top like:
### recoding ages
YP_repeated$edad[YP_repeated$edad == 1] <- 11
YP_repeated$edad[YP_repeated$edad == 2] <- 12
YP_repeated$edad[YP_repeated$edad == 3] <- 13
YP_repeated$edad[YP_repeated$edad == 4] <- 14
YP_repeated$edad[YP_repeated$edad == 5] <- 15
YP_repeated$edad[YP_repeated$edad == 6] <- 16
YP_repeated$edad[YP_repeated$edad == 7] <- 17
### creating age groups
YP_repeated$edadcat[YP_repeated$edad >= 11 & YP_repeated$edad <= 13] <- "11-13"
YP_repeated$edadcat[YP_repeated$edad >= 14 & YP_repeated$edad <= 17] <- "14-17"
### recoding values
YP_repeated$recibepsicot[YP_repeated$recibepsicot == 1] <- "Si"
YP_repeated$recibepsicot[YP_repeated$recibepsicot == 2] <- "No"
YP_repeated$tipopsicot[YP_repeated$tipopsicot == 1] <- "Psicoterapia individual"
YP_repeated$tipopsicot[YP_repeated$tipopsicot == 2] <- "Psicoterapia familiar"
YP_repeated$tipopsicot[YP_repeated$tipopsicot == 3] <- "Psicoterapia grupal"
YP_repeated$genero[YP_repeated$genero == 1] <- "Masculino"
YP_repeated$genero[YP_repeated$genero == 2] <- "Femenino"
YP_repeated$genero[YP_repeated$genero == 3] <- "No binario"
YP_repeated$genero[YP_repeated$genero == 4] <- "Otro"
YP_repeated$tipocolegio[YP_repeated$tipocolegio == 1] <- "Pública (estatal)"
YP_repeated$tipocolegio[YP_repeated$tipocolegio == 2] <- "Municipal"
YP_repeated$tipocolegio[YP_repeated$tipocolegio == 3] <- "Privada"
YP_repeated$tipocolegio[YP_repeated$tipocolegio == 4] <- "Fiscomisional"
YP_repeated$curso[YP_repeated$curso == 1] <- "Séptimo de básica"
YP_repeated$curso[YP_repeated$curso == 2] <- "Octavo de básica"
YP_repeated$curso[YP_repeated$curso == 3] <- "Noveno de básica"
YP_repeated$curso[YP_repeated$curso == 4] <- "Décimo de básica"
YP_repeated$curso[YP_repeated$curso == 5] <- "Décimo de básica"
YP_repeated$curso[YP_repeated$curso == 6] <- "Primero de bachillerato"
YP_repeated$curso[YP_repeated$curso == 7] <- "Segundo de bachillerato"
YP_repeated$curso[YP_repeated$curso == 8] <- "Tercero de bachillerato"
YP_repeated$zonavives[YP_repeated$zonavives == 1] <- "Urbana"
YP_repeated$zonavives[YP_repeated$zonavives == 2] <- "Rural"
YP_repeated$dgmedico[YP_repeated$dgmedico == 1] <- "Si"
YP_repeated$dgmedico[YP_repeated$dgmedico == 2] <- "No"
YP_repeated$dgmedicocual[YP_repeated$dgmedicocual == 1] <- "Diabetes"
YP_repeated$dgmedicocual[YP_repeated$dgmedicocual == 2] <- "Hipertensión"
YP_repeated$dgmedicocual[YP_repeated$dgmedicocual == 3] <- "Enfermedad cerebrovascular"
YP_repeated$dgmedicocual[YP_repeated$dgmedicocual == 4] <- "Insuficiencia cardíaca, complicaciones y enfermedades congénitas"
YP_repeated$dgmedicocual[YP_repeated$dgmedicocual == 5] <- "Cáncer"
YP_repeated$dgmedicocual[YP_repeated$dgmedicocual == 6] <- "Insuficiencia renal"
YP_repeated$dgmedicocual[YP_repeated$dgmedicocual == 7] <- "Otro"
YP_repeated$toma_medicam[YP_repeated$toma_medicam == 1] <- "Si"
YP_repeated$toma_medicam[YP_repeated$toma_medicam == 2] <- "No"
### I think what you're doing here is creating a new tibble for completion 1
### It may be partly 'cos I'm a bit spoiled with a lot of RAM, hard disc and CPU power on my machine but I have stopped
### doing this.  It means I use a lot more filter(completionN == 1) lines in tidverse pipes but it means I keep the
### number of tibbles I have to a real minimum, typically tibRawDat for the raw data and tibDat for the data I will use
### after doing all my recoding
YPC1 <- YP_repeated[YP_repeated$completionN == 1, ]
YPC1 <- YPC1 %>%
filter(session.x != "NA") %>%
filter(nombres != "NA")
# Chunk 4: tidy_for_CFA
### I don't like having nombres, fechanac or correo in there and I don't need the timings
YPC1 %>%
select(-c(nombres, fechanac, correo, ends_with(".x"), ends_with(".y"))) -> YPC1
### OK, I think I have the data I want in YPC1, I will rename it and get rid of the rest.
tibYPdat <- YPC1
rm(list=ls(pattern = glob2rx("YP*")))
rm(CSocioNDUP)
# Chunk 5: renaming
paste0("YP", 1:10) %>%
as_tibble() %>%
rename(namesFirst = value) %>%
mutate(itemN = 1:10, # could have done this earlier, but!
names5char = c("NEdgy",
"NTalk",
"PCope",
"NHurt",
"PHelp",
"NThFe",
"NProb",
"NSlee",
"NUnha",
"PDone"),
fullText = c("1. I’ve felt edgy or nervous",
"2. I haven’t felt like talking to anyone",
"3. I’ve felt able to cope when things go wrong",
"4. I’ve thought of hurting myself",
"5. There’s been someone I felt able to ask for help",
"6. My thoughts and feelings distressed me",
"7. My problems have felt too much for me",
"8. It’s been hard to go to sleep or stay asleep",
"9. I’ve felt unhappy",
"10. I’ve done all the things I wanted to")) %>%
select(itemN, everything()) -> tibItemNames
tibItemNames %>%
flextable() %>%
autofit()
tibItemNames %>%
select(names5char) %>%
pull() -> vecNames
### Hm, this was an almost total waste of time but it did remind me that:
###    A) you can't do this! (and damn, I think I've tried this before!)
###    B) a bit about passing variables (which I can never remember)
# lookupName <- function(name, tibItemNames, findName, replaceName) {
#   ### little function to make renaming easy with rename_with()
#   ###
#   ### sanity check arguments
#   ###
#   if(!is_tibble(tibItemNames)) {
#     stop(paste0("The lookup tibble you specified isn't a tibble"))
#   }
#   if(!findName %in% colnames(tibItemNames)) {
#     stop(paste0("You asked to lookup name in variable named '",
#                 findName,
#                 "' but there is no such variable in tibItemNames"))
#   }
#   if(!replaceName %in% colnames(tibItemNames)) {
#     stop(paste0("You asked to use replacement name in variable named '",
#                 replaceName,
#                 "' but there is no such variable in tibItemNames"))
#   }
#   ###
#   ### OK, got usable arguments
#   ###
#   tibItemNames %>%
#     filter(.data[[findName]] == name) -> tibSelected
#   if(nrow(tibSelected) == 0){
#     stop(paste0("Rename lookup failed: can't find ",
#                 name,
#                 " in ",
#                 " variable ",
#                 deparse(substitute(lookupName)),
#                 " in the tibble you supplied: ",
#                 deparse(substitute(tibItemNames))))
#   }
#   tibSelected %>%
#     select(any_of(replaceName)) %>%
#     pull()
# }
# ### test that
# # lookupName("YP1", tibItemNames, "sausages", "saucissons")
# # lookupName("YP1", tibItemNames, "namesFirst", "saucissons")
# # lookupName("YP1", "bangers", "namesFirst", "names5char")
# # lookupName("YP", tibItemNames, "namesFirst", "names5char")
# # lookupName("YP1", tibItemNames, "namesFirst", "names5char")
### OK, rename manually
tibYPdat %>%
rename(NEdgy = YP1,
NTalk = YP2,
PCope = YP3,
NHurt = YP4,
PHelp = YP5,
NThFe = YP6,
NProb = YP7,
NSlee = YP8,
NUnha = YP9,
PDone = YP10) -> tibYPdatRenamed
# Chunk 6: CFA1_ML
# singleFac.model  <- 'F1  =~ YP1 + YP2 + YP3 + YP4 + YP5 + YP6 + YP7 + YP8 + YP9 + YP10'
singleFac.model  <- 'F1  =~ NEdgy + NTalk + PCope + NHurt + PHelp + NThFe + NProb + NSlee + NUnha + PDone'
SingleFitML <- lavaan::cfa(singleFac.model,
std.lv = TRUE,
data = tibYPdatRenamed)
semPlot::semPaths(SingleFitML, whatLabels = "est")
# Chunk 7: CFA1_ML_fit
lavaan::summary(SingleFitML, fit.measures = TRUE)
# Chunk 9: CFA1_ML_MIs
### I'm not sure I get that much from inspecting the residuals
# lavaan::residuals(SingleFitML, type = "cor")$cov
lavaan::modificationIndices(SingleFitML, sort.=TRUE, minimum.value=3)
# Chunk 10: CFA2_ML
twoFac.model  <- 'NF  =~ NEdgy + NTalk + NHurt + NThFe + NProb + NSlee + NUnha
PF  =~ PCope + PHelp + PDone
NF ~~ PF'
TwoFitML <- lavaan::cfa(twoFac.model,
std.lv = TRUE,
data = tibYPdatRenamed)
semPlot::semPaths(TwoFitML, whatLabels = "est")
# Chunk 11: CFA2_ML_fit
lavaan::summary(TwoFitML, fit.measures = TRUE)
# Chunk 12: CFA2_ML_MIs
### I'm not sure I get that much from inspecting the residuals
# lavaan::residuals(SingleFitML, type = "cor")$cov
lavaan::modificationIndices(TwoFitML, sort.=TRUE, minimum.value=3)
# Chunk 13: compare1
anova(SingleFitML, TwoFitML)
# semTools::compareFit(SingleFitML, TwoFitML, nested = TRUE) -> compare1with2
# summary(compare1with2, fit.measures = "all")
models <- list(SingleFitML, TwoFitML)
semTable::compareLavaan(models)
# Chunk 14: lavPredict1
### get only complete YP-CORE data
tibYPdatRenamed %>%
rowwise() %>%
mutate(nMissItems = getNNA(c_across(NEdgy:PDone))) %>%
ungroup() %>%
filter(nMissItems == 0) -> tibYPcomplete
### get factor scores, single factor model
lavPredict(SingleFitML, type = "lv") %>%
as_tibble() %>%
mutate(F1 = as.numeric(F1)) -> tmpTibF1
### bind them in
bind_cols(tibYPcomplete,
tmpTibF1) -> tibYPcomplete
### get factor scores, two factor model
lavPredict(TwoFitML, type = "lv") %>%
as_tibble() %>%
mutate(NF = as.numeric(NF),
PF = as.numeric(PF)) -> tmpTibF2
bind_cols(tibYPcomplete,
tmpTibF2) -> tibYPcomplete
tibYPcomplete %>%
select(F1, NF, PF)
ggplot(data = tibYPcomplete,
aes(x = NF, y = PF)) +
geom_point(alpha = .5) +
geom_smooth(method = "lm") +
stat_regline_equation(label.y = 2, aes(label = ..eq.label..)) +
stat_regline_equation(label.y = 1.5, aes(label = ..rr.label..)) +
ggtitle("Regression of negative latent on positive latent")
ggplot(data = tibYPcomplete,
aes(x = NF, y = F1)) +
geom_point(alpha = .5) +
geom_smooth(method = "lm") +
stat_regline_equation(label.y = 2, aes(label = ..eq.label..)) +
stat_regline_equation(label.y = 1.5, aes(label = ..rr.label..)) +
ggtitle("Regression of negative latent on single latent")
ggplot(data = tibYPcomplete,
aes(x = PF, y = F1)) +
geom_point(alpha = .5) +
geom_smooth(method = "lm") +
stat_regline_equation(label.y = 2, aes(label = ..eq.label..)) +
stat_regline_equation(label.y = 1.5, aes(label = ..rr.label..)) +
ggtitle("Regression of positive latent on single latent")
tibYPcomplete %>%
summarise(resid = list(resid(lm(formula = PF ~ NF, data =.)))) %>%
unnest(resid) %>%
rename(residPFonNF = resid) -> tibResidPFonNF
tibYPcomplete %>%
bind_cols(tibResidPFonNF) -> tibYPcomplete
# Chunk 15: lavPredict2
tibYPcomplete %>%
mutate(tipopsicot = case_match(tipopsicot,
"1, 2" ~ "Y",
"Psicoterapia familiar" ~ "Y",
"Psicoterapia individual" ~ "Y",
NA ~ "N")) -> tibYPcomplete
vecPredVars <- c("genero", "edad", "tipopsicot", "tipocolegio", "curso", "zonavives", "dgmedico",
"estadosalud", "toma_medicam", "satisfechovida")
vecDepVars <- c("F1", "PF", "NF", "residPFonNF")
vecBothVars <- c(vecPredVars, vecDepVars)
tibYPcomplete %>%
select(all_of(vecBothVars)) %>%
mutate(edad = as.character(edad)) %>%
pivot_longer(cols = genero:satisfechovida) -> tmpTib
tmpPlot <- function(variable) {
tmpTib %>%
filter(name == variable) -> tmpTib2
tmpTib2 %>%
summarise(tmpMedian = median(residPFonF1)) %>%
pull() -> tmpMedian
ggplot(data = tmpTib2,
aes(x = value, y = residPFonF1)) +
geom_boxplot(varwidth = TRUE, notch = TRUE) +
geom_hline(yintercept = tmpMedian) +
ylab("Residual: PF regressed on F1") +
xlab(variable) -> p
print(p)
}
vecPredVars
tmpTib %>%
filter(name == "edad")
tmpTib %>%
filter(name == "edad") %>% count(value)
tmpTib %>%
filter(name == "edad") %>%
mutate(value = ordered(value,
levels = as.character(11:17))) -> tmpTib2
tmpTib %>%
filter(name == "edad") %>%
mutate(value = ordered(value,
levels = as.character(11:17))) -> tmpTib2
tmpTib2 %>%
summarise(tmpMedian = median(residPFonF1)) %>%
pull() -> tmpMedian
ggplot(data = tmpTib2,
aes(x = value, y = residPFonF1)) +
geom_boxplot(varwidth = TRUE, notch = TRUE) +
geom_hline(yintercept = tmpMedian) +
ylab("Residual: PF regressed on F1") +
xlab("Age")
tmpTib2 %>%
summarise(tmpMedian = median(residPFonF1)) %>%
pull() -> tmpMedian
ggplot(data = tmpTib2,
aes(x = value, y = residPFonF1)) +
geom_boxplot(varwidth = TRUE, notch = TRUE) +
geom_hline(yintercept = tmpMedian) +
ylab("Residual: PF regressed on F1") +
xlab("Age")
tmpTib %>%
filter(name == "edad") %>%
mutate(value = ordered(value,
levels = as.character(11:17))) -> tmpTib2
tmpTib2 %>%
summarise(tmpMedian = median(residPFonNF)) %>%
pull() -> tmpMedian
ggplot(data = tmpTib2,
aes(x = value, y = residPFonF1)) +
geom_boxplot(varwidth = TRUE, notch = TRUE) +
geom_hline(yintercept = tmpMedian) +
ylab("Residual: PF regressed on F1") +
xlab("Age")
tmpPlot("genero")
vecPredVars
tmpPlot("tipopsicot")
tmpPlot <- function(variable) {
tmpTib %>%
filter(name == variable) -> tmpTib2
tmpTib2 %>%
summarise(tmpMedian = median(residPFonNF)) %>%
pull() -> tmpMedian
ggplot(data = tmpTib2,
aes(x = value, y = residPFonNF)) +
geom_boxplot(varwidth = TRUE, notch = TRUE) +
geom_hline(yintercept = tmpMedian) +
ylab("Residual: PF regressed on F1") +
xlab(variable) -> p
print(p)
}
tmpPlot("tipopsicot")
vecPredVars
tmpPlot("tipocolegio")
tmpPlot("curso")
tmpPlot <- function(variable) {
tmpTib %>%
filter(name == variable) -> tmpTib2
tmpTib2 %>%
summarise(tmpMedian = median(residPFonNF)) %>%
pull() -> tmpMedian
ggplot(data = tmpTib2,
aes(x = value, y = residPFonNF)) +
geom_boxplot(varwidth = TRUE, notch = TRUE) +
geom_hline(yintercept = tmpMedian) +
ylab("Residual: PF regressed on F1") +
theme(axis.x.text = element_text(angle = 70,
hjust = 1)) +
xlab(variable) -> p
print(p)
}
tmpPlot("genero")
?theme
tmpPlot <- function(variable) {
tmpTib %>%
filter(name == variable) -> tmpTib2
tmpTib2 %>%
summarise(tmpMedian = median(residPFonNF)) %>%
pull() -> tmpMedian
ggplot(data = tmpTib2,
aes(x = value, y = residPFonNF)) +
geom_boxplot(varwidth = TRUE, notch = TRUE) +
geom_hline(yintercept = tmpMedian) +
ylab("Residual: PF regressed on F1") +
theme(axis.text.x = element_text(angle = 70,
hjust = 1)) +
xlab(variable) -> p
print(p)
}
tmpPlot("genero")
tmpPlot("curso")
vecPredVars
tmpPlot("zonavives")
tmpPlot("dgmedico")
tmpPlot("estadosalud")
tmpTib %>%
filter(name == "estadosalud") %>%
mutate(value = ordered(value,
levels = as.character(11:17))) -> tmpTib2
tmpTib2 %>%
summarise(tmpMedian = median(residPFonNF)) %>%
pull() -> tmpMedian
ggplot(data = tmpTib2,
aes(x = value, y = residPFonNF)) +
geom_boxplot(varwidth = TRUE, notch = TRUE) +
geom_hline(yintercept = tmpMedian) +
ylab("Residual: PF regressed on F1") +
xlab("estadosalud")
tmpTib %>%
filter(name == "estadosalud") %>%
mutate(value = ordered(value,
levels = as.character(1:10))) -> tmpTib2
tmpTib2 %>%
summarise(tmpMedian = median(residPFonNF)) %>%
pull() -> tmpMedian
ggplot(data = tmpTib2,
aes(x = value, y = residPFonNF)) +
geom_boxplot(varwidth = TRUE, notch = TRUE) +
geom_hline(yintercept = tmpMedian) +
ylab("Residual: PF regressed on F1") +
xlab("estadosalud")
ggplot(data = tmpTib2,
aes(x = value, y = residPFonNF)) +
geom_smooth() +
geom_hline(yintercept = tmpMedian) +
ylab("Residual: PF regressed on F1") +
xlab("estadosalud")
ggplot(data = tmpTib2,
aes(x = as.numeric(value), y = residPFonNF)) +
geom_smooth() +
geom_hline(yintercept = tmpMedian) +
ylab("Residual: PF regressed on F1") +
xlab("estadosalud")
ggplot(data = tmpTib2,
aes(x = as.numeric(value), y = residPFonNF)) +
geom_point() +
geom_smooth() +
geom_hline(yintercept = tmpMedian) +
ylab("Residual: PF regressed on F1") +
xlab("estadosalud")
ggplot(data = tmpTib2,
aes(x = as.numeric(value), y = residPFonNF)) +
geom_point() +
geom_smooth() +
geom_hline(yintercept = tmpMedian) +
ylab("Residual: PF regressed on NF") +
scale_x_manual(name = "estadosalud",
breaks = 1:10)
ggplot(data = tmpTib2,
aes(x = as.numeric(value), y = residPFonNF)) +
geom_point() +
geom_smooth() +
geom_hline(yintercept = tmpMedian) +
ylab("Residual: PF regressed on NF") +
scale_x_continuous(name = "estadosalud",
breaks = 1:10)
vecPredVars
tmpPlot("toma_medicam")
tmpTib %>%
filter(name == "satisfechovida") %>%
mutate(value = ordered(value,
levels = as.character(1:10))) -> tmpTib2
tmpTib2 %>%
summarise(tmpMedian = median(residPFonNF)) %>%
pull() -> tmpMedian
ggplot(data = tmpTib2,
aes(x = value, y = residPFonNF)) +
geom_boxplot(varwidth = TRUE, notch = TRUE) +
geom_hline(yintercept = tmpMedian) +
ylab("Residual: PF regressed on NF") +
xlab("satisfechovida")
ggplot(data = tmpTib2,
aes(x = as.numeric(value), y = residPFonNF)) +
geom_point() +
geom_smooth() +
geom_hline(yintercept = tmpMedian) +
ylab("Residual: PF regressed on NF") +
scale_x_continuous(name = "satisfechovida",
breaks = 1:10)
