pointsHS <- rnorm(xVals, meanHS, SDHS)
tibble(NHS = pointsNHS,
HS = pointsHS) %>%
mutate(x = xVals)
#   pivot_longer(cols = everything()) -> tmpTib
# ggplot(data = tmpTib,
#        aes(x = value))
}
plotCSC(3, 1, 1.5, 1.2, 0, 4)
plotCSC <- function(meanNHS, SDNHS, meanHS, SDHS, minPoss, maxPoss) {
nPoints <- 500
xVals <- seq(minPoss, maxPoss, length = nPoints)
pointsNHS <- pnorm(xVals, meanNHS, SDNHS)
pointsHS <- rnorm(xVals, meanHS, SDHS)
tibble(NHS = pointsNHS,
HS = pointsHS) %>%
mutate(x = xVals)
#   pivot_longer(cols = everything()) -> tmpTib
# ggplot(data = tmpTib,
#        aes(x = value))
}
plotCSC(3, 1, 1.5, 1.2, 0, 4)
plotCSC <- function(meanNHS, SDNHS, meanHS, SDHS, minPoss, maxPoss) {
nPoints <- 500
xVals <- seq(minPoss, maxPoss, length = nPoints)
pointsNHS <- pnorm(xVals, meanNHS, SDNHS)
pointsHS <- rnorm(xVals, meanHS, SDHS)
tibble(NHS = pointsNHS,
HS = pointsHS) %>%
mutate(x = xVals)
pivot_longer(cols = everything()) #-> tmpTib
# ggplot(data = tmpTib,
#        aes(x = value))
}
plotCSC(3, 1, 1.5, 1.2, 0, 4)
plotCSC <- function(meanNHS, SDNHS, meanHS, SDHS, minPoss, maxPoss) {
nPoints <- 500
xVals <- seq(minPoss, maxPoss, length = nPoints)
pointsNHS <- pnorm(xVals, meanNHS, SDNHS)
pointsHS <- rnorm(xVals, meanHS, SDHS)
tibble(NHS = pointsNHS,
HS = pointsHS) %>%
mutate(x = xVals) %>%
pivot_longer(cols = everything()) #-> tmpTib
# ggplot(data = tmpTib,
#        aes(x = value))
}
plotCSC(3, 1, 1.5, 1.2, 0, 4)
plotCSC <- function(meanNHS, SDNHS, meanHS, SDHS, minPoss, maxPoss) {
nPoints <- 500
xVals <- seq(minPoss, maxPoss, length = nPoints)
pointsNHS <- pnorm(xVals, meanNHS, SDNHS)
pointsHS <- rnorm(xVals, meanHS, SDHS)
tibble(NHS = pointsNHS,
HS = pointsHS) %>%
mutate(x = xVals) %>%
pivot_longer(cols = c(NHS, HS)) #-> tmpTib
# ggplot(data = tmpTib,
#        aes(x = value))
}
plotCSC(3, 1, 1.5, 1.2, 0, 4)
plotCSC <- function(meanNHS, SDNHS, meanHS, SDHS, minPoss, maxPoss) {
nPoints <- 500
xVals <- seq(minPoss, maxPoss, length = nPoints)
pointsNHS <- pnorm(xVals, meanNHS, SDNHS)
pointsHS <- rnorm(xVals, meanHS, SDHS)
tibble(NHS = pointsNHS,
HS = pointsHS) %>%
mutate(x = xVals) %>%
pivot_longer(cols = c(NHS, HS)) #-> tmpTib
ggplot(data = tmpTib,
aes(x = x, y = value, colour = name)) +
geom_line()
}
plotCSC(3, 1, 1.5, 1.2, 0, 4)
plotCSC <- function(meanNHS, SDNHS, meanHS, SDHS, minPoss, maxPoss) {
nPoints <- 500
xVals <- seq(minPoss, maxPoss, length = nPoints)
pointsNHS <- pnorm(xVals, meanNHS, SDNHS)
pointsHS <- rnorm(xVals, meanHS, SDHS)
tibble(NHS = pointsNHS,
HS = pointsHS) %>%
mutate(x = xVals) %>%
pivot_longer(cols = c(NHS, HS)) -> tmpTib
ggplot(data = tmpTib,
aes(x = x, y = value, colour = name)) +
geom_line()
}
plotCSC(3, 1, 1.5, 1.2, 0, 4)
plotCSC <- function(meanNHS, SDNHS, meanHS, SDHS, minPoss, maxPoss) {
nPoints <- 500
xVals <- seq(minPoss, maxPoss, length = nPoints)
pointsNHS <- pnorm(xVals, meanNHS, SDNHS)
pointsHS <- rnorm(xVals, meanHS, SDHS)
tibble(NHS = pointsNHS,
HS = pointsHS) %>%
mutate(x = xVals) %>%
pivot_longer(cols = c(NHS, HS)) -> tmpTib
ggplot(data = tmpTib,
aes(x = x, y = value, colour = name, group = name)) +
geom_line()
}
plotCSC(3, 1, 1.5, 1.2, 0, 4)
plotCSC <- function(meanNHS, SDNHS, meanHS, SDHS, minPoss, maxPoss) {
nPoints <- 500
xVals <- seq(minPoss, maxPoss, length = nPoints)
pointsNHS <- pnorm(xVals, meanNHS, SDNHS)
pointsHS <- pnorm(xVals, meanHS, SDHS)
tibble(NHS = pointsNHS,
HS = pointsHS) %>%
mutate(x = xVals) %>%
pivot_longer(cols = c(NHS, HS)) -> tmpTib
ggplot(data = tmpTib,
aes(x = x, y = value, colour = name, group = name)) +
geom_line()
}
plotCSC(3, 1, 1.5, 1.2, 0, 4)
plotCSC <- function(meanNHS, SDNHS, meanHS, SDHS, minPoss, maxPoss) {
nPoints <- 500
xVals <- seq(minPoss, maxPoss, length = nPoints)
pointsNHS <- qnorm(xVals, meanNHS, SDNHS)
pointsHS <- qnorm(xVals, meanHS, SDHS)
tibble(NHS = pointsNHS,
HS = pointsHS) %>%
mutate(x = xVals) %>%
pivot_longer(cols = c(NHS, HS)) -> tmpTib
ggplot(data = tmpTib,
aes(x = x, y = value, colour = name, group = name)) +
geom_line()
}
plotCSC(3, 1, 1.5, 1.2, 0, 4)
plotCSC <- function(meanNHS, SDNHS, meanHS, SDHS, minPoss, maxPoss) {
nPoints <- 500
xVals <- seq(minPoss, maxPoss, length = nPoints)
pointsNHS <- pnorm(xVals, meanNHS, SDNHS)
pointsHS <- pnorm(xVals, meanHS, SDHS)
tibble(NHS = pointsNHS,
HS = pointsHS) %>%
mutate(x = xVals) %>%
pivot_longer(cols = c(NHS, HS)) -> tmpTib
ggplot(data = tmpTib,
aes(x = x, y = value, colour = name, group = name)) +
geom_line()
}
plotCSC(3, 1, 1.5, 1.2, 0, 4)
plotCSC <- function(meanNHS, SDNHS, meanHS, SDHS, minPoss, maxPoss) {
nPoints <- 500
xVals <- seq(minPoss, maxPoss, length = nPoints)
pointsNHS <- dnorm(xVals, meanNHS, SDNHS)
pointsHS <- dnorm(xVals, meanHS, SDHS)
tibble(NHS = pointsNHS,
HS = pointsHS) %>%
mutate(x = xVals) %>%
pivot_longer(cols = c(NHS, HS)) -> tmpTib
ggplot(data = tmpTib,
aes(x = x, y = value, colour = name, group = name)) +
geom_line()
}
plotCSC(3, 1, 1.5, 1.2, 0, 4)
plotCSC <- function(meanNHS, SDNHS, meanHS, SDHS, minPoss, maxPoss) {
CSC <- (SDHS * meanNHS + SDNHS * meanHS) / (SDNHS + SDHS)
nPoints <- 500
xVals <- seq(minPoss, maxPoss, length = nPoints)
pointsNHS <- dnorm(xVals, meanNHS, SDNHS)
pointsHS <- dnorm(xVals, meanHS, SDHS)
tibble(NHS = pointsNHS,
HS = pointsHS) %>%
mutate(x = xVals) %>%
pivot_longer(cols = c(NHS, HS)) -> tmpTib
ggplot(data = tmpTib,
aes(x = x, y = value, colour = name, group = name)) +
geom_line() +
geom_vline(xintercept = CSC) +
ylab("Probability of score") +
xlab("Score") +
ggtitle("Plot of probabilities of scores for help-seeking and non-help-seeking scores",
subtitle = "Uses your referential mean and SD and score limits and Gaussian model.")
}
plotCSC(3, 1, 1.5, 1.2, 0, 4)
plotCSC <- function(meanNHS, SDNHS, meanHS, SDHS, minPoss, maxPoss) {
CSC <- (SDHS * meanNHS + SDNHS * meanHS) / (SDNHS + SDHS)
nPoints <- 500
xVals <- seq(minPoss, maxPoss, length = nPoints)
pointsNHS <- dnorm(xVals, meanNHS, SDNHS)
pointsHS <- dnorm(xVals, meanHS, SDHS)
tibble(NHS = pointsNHS,
HS = pointsHS) %>%
mutate(x = xVals) %>%
pivot_longer(cols = c(NHS, HS)) -> tmpTib
ggplot(data = tmpTib,
aes(x = x, y = value, colour = name, group = name)) +
geom_line() +
geom_vline(xintercept = CSC) +
ylab("Probability of score") +
xlab("Score") +
ggtitle("Plot of probabilities of scores for help-seeking and non-help-seeking scores",
subtitle = "Uses your referential mean and SD and score limits and Gaussian model.") +
theme_bw()
}
plotCSC(3, 1, 1.5, 1.2, 0, 4)
plotCSC <- function(meanNHS, SDNHS, meanHS, SDHS, minPoss, maxPoss) {
CSC <- (SDHS * meanNHS + SDNHS * meanHS) / (SDNHS + SDHS)
nPoints <- 500
xVals <- seq(minPoss, maxPoss, length = nPoints)
pointsNHS <- dnorm(xVals, meanNHS, SDNHS)
pointsHS <- dnorm(xVals, meanHS, SDHS)
tibble(NHS = pointsNHS,
HS = pointsHS) %>%
mutate(x = xVals) %>%
pivot_longer(cols = c(NHS, HS)) -> tmpTib
ggplot(data = tmpTib,
aes(x = x, y = value, colour = name, group = name)) +
geom_line() +
geom_vline(xintercept = CSC) +
ylab("Probability of score") +
xlab("Score") +
ggtitle("Plot of probabilities of scores for help-seeking and non-help-seeking scores",
subtitle = "Uses your referential mean and SD and score limits and Gaussian model.") +
theme_bw() +
theme(plot.title = element_text(hjust = .5),
plot.subtitle = element_text(hjust = .5))
}
plotCSC(3, 1, 1.5, 1.2, 0, 4)
runApp('apps/CSC1')
runApp('apps/CSC1')
runApp('apps/CSC1')
?scale_color_discrete
?scale_color_discrete
?scale_colour_manual
runApp('apps/CSC1')
?geom_area
plotCSC(.76, .59, 1.86, .75, 0, 4)
plotCSC <- function(meanNHS, SDNHS, meanHS, SDHS, minPoss, maxPoss) {
CSC <- (SDHS * meanNHS + SDNHS * meanHS) / (SDNHS + SDHS)
nPoints <- 500
xVals <- seq(minPoss, maxPoss, length = nPoints)
pointsNHS <- dnorm(xVals, meanNHS, SDNHS)
pointsHS <- dnorm(xVals, meanHS, SDHS)
tibble(NHS = pointsNHS,
HS = pointsHS) %>%
mutate(x = xVals) %>%
pivot_longer(cols = c(NHS, HS)) %>%
mutate(NHShigh = if_else(name == "NHS" & x > CSC, "NHShigh", "NHSlow"),
HSlow = if_else(name == "HS" & x > CSC, "HShigh", "HSlow")) -> tmpTib
vecColours <- c("NHS" = "green", "HS" = "red")
ggplot(data = tmpTib,
aes(x = x, y = value, colour = name, group = name)) +
geom_line() +
geom_vline(xintercept = CSC) +
geom_ribbon(aes(ymin = 0, ymax = value, fill = name),
alpha = .5) +
scale_colour_manual(values = vecColours) +
ylab("Probability of score") +
xlab("Score") +
ggtitle("Plot of probabilities of scores for help-seeking and non-help-seeking scores",
subtitle = "Uses your referential mean and SD and score limits and Gaussian model.") +
theme_bw() +
theme(plot.title = element_text(hjust = .5),
plot.subtitle = element_text(hjust = .5)) -> p
return(p)
}
plotCSC(.76, .59, 1.86, .75, 0, 4)
plotCSC <- function(meanNHS, SDNHS, meanHS, SDHS, minPoss, maxPoss) {
CSC <- (SDHS * meanNHS + SDNHS * meanHS) / (SDNHS + SDHS)
nPoints <- 500
xVals <- seq(minPoss, maxPoss, length = nPoints)
pointsNHS <- dnorm(xVals, meanNHS, SDNHS)
pointsHS <- dnorm(xVals, meanHS, SDHS)
tibble(NHS = pointsNHS,
HS = pointsHS) %>%
mutate(x = xVals) %>%
pivot_longer(cols = c(NHS, HS)) %>%
mutate(NHShigh = if_else(name == "NHS" & x > CSC, "NHShigh", "NHSlow"),
HSlow = if_else(name == "HS" & x > CSC, "HShigh", "HSlow")) -> tmpTib
vecColours <- c("NHS" = "green", "HS" = "red")
ggplot(data = tmpTib,
aes(x = x, y = value, colour = name, group = name)) +
geom_line() +
geom_vline(xintercept = CSC) +
geom_ribbon(data = filter(tmpTib, name == "NHS"),
aes(ymin = 0, ymax = value, fill = name),
alpha = .5) +
scale_colour_manual(values = vecColours) +
ylab("Probability of score") +
xlab("Score") +
ggtitle("Plot of probabilities of scores for help-seeking and non-help-seeking scores",
subtitle = "Uses your referential mean and SD and score limits and Gaussian model.") +
theme_bw() +
theme(plot.title = element_text(hjust = .5),
plot.subtitle = element_text(hjust = .5)) -> p
return(p)
}
plotCSC(.76, .59, 1.86, .75, 0, 4)
plotCSC <- function(meanNHS, SDNHS, meanHS, SDHS, minPoss, maxPoss) {
CSC <- (SDHS * meanNHS + SDNHS * meanHS) / (SDNHS + SDHS)
nPoints <- 500
xVals <- seq(minPoss, maxPoss, length = nPoints)
pointsNHS <- dnorm(xVals, meanNHS, SDNHS)
pointsHS <- dnorm(xVals, meanHS, SDHS)
tibble(NHS = pointsNHS,
HS = pointsHS) %>%
mutate(x = xVals) %>%
pivot_longer(cols = c(NHS, HS)) %>%
mutate(NHShigh = if_else(name == "NHS" & x > CSC, "NHShigh", "NHSlow"),
HSlow = if_else(name == "HS" & x > CSC, "HShigh", "HSlow")) -> tmpTib
vecColours <- c("NHS" = "green", "HS" = "red")
ggplot(data = tmpTib,
aes(x = x, y = value, colour = name, group = name)) +
geom_line() +
geom_vline(xintercept = CSC) +
geom_ribbon(data = filter(tmpTib, name == "NHS" & x > CSC),
aes(ymin = 0, ymax = value, fill = name),
alpha = .5) +
scale_colour_manual(values = vecColours) +
ylab("Probability of score") +
xlab("Score") +
ggtitle("Plot of probabilities of scores for help-seeking and non-help-seeking scores",
subtitle = "Uses your referential mean and SD and score limits and Gaussian model.") +
theme_bw() +
theme(plot.title = element_text(hjust = .5),
plot.subtitle = element_text(hjust = .5)) -> p
return(p)
}
plotCSC(.76, .59, 1.86, .75, 0, 4)
plotCSC <- function(meanNHS, SDNHS, meanHS, SDHS, minPoss, maxPoss) {
CSC <- (SDHS * meanNHS + SDNHS * meanHS) / (SDNHS + SDHS)
nPoints <- 500
xVals <- seq(minPoss, maxPoss, length = nPoints)
pointsNHS <- dnorm(xVals, meanNHS, SDNHS)
pointsHS <- dnorm(xVals, meanHS, SDHS)
tibble(NHS = pointsNHS,
HS = pointsHS) %>%
mutate(x = xVals) %>%
pivot_longer(cols = c(NHS, HS)) %>%
mutate(NHShigh = if_else(name == "NHS" & x > CSC, "NHShigh", "NHSlow"),
HSlow = if_else(name == "HS" & x > CSC, "HShigh", "HSlow")) -> tmpTib
vecColours <- c("NHS" = "green", "HS" = "red")
ggplot(data = tmpTib,
aes(x = x, y = value, colour = name, group = name)) +
geom_line() +
geom_vline(xintercept = CSC) +
geom_ribbon(data = filter(tmpTib, name == "NHS" & x > CSC),
aes(ymin = 0, ymax = value, fill = name),
alpha = .5) +
scale_colour_manual(values = vecColours) +
scale_fill_manual(values = vecColours) +
ylab("Probability of score") +
xlab("Score") +
ggtitle("Plot of probabilities of scores for help-seeking and non-help-seeking scores",
subtitle = "Uses your referential mean and SD and score limits and Gaussian model.") +
theme_bw() +
theme(plot.title = element_text(hjust = .5),
plot.subtitle = element_text(hjust = .5)) -> p
return(p)
}
plotCSC(.76, .59, 1.86, .75, 0, 4)
plotCSC <- function(meanNHS, SDNHS, meanHS, SDHS, minPoss, maxPoss) {
CSC <- (SDHS * meanNHS + SDNHS * meanHS) / (SDNHS + SDHS)
nPoints <- 500
xVals <- seq(minPoss, maxPoss, length = nPoints)
pointsNHS <- dnorm(xVals, meanNHS, SDNHS)
pointsHS <- dnorm(xVals, meanHS, SDHS)
tibble(NHS = pointsNHS,
HS = pointsHS) %>%
mutate(x = xVals) %>%
pivot_longer(cols = c(NHS, HS)) %>%
mutate(NHShigh = if_else(name == "NHS" & x > CSC, "NHShigh", "NHSlow"),
HSlow = if_else(name == "HS" & x > CSC, "HShigh", "HSlow")) -> tmpTib
vecColours <- c("NHS" = "green", "HS" = "red")
ggplot(data = tmpTib,
aes(x = x, y = value, colour = name, group = name)) +
geom_line() +
geom_vline(xintercept = CSC) +
geom_ribbon(data = filter(tmpTib, name == "NHS" & x > CSC),
aes(ymin = 0, ymax = value, fill = name),
alpha = .5) +
geom_ribbon(data = filter(tmpTib, name == "HS" & x < CSC),
aes(ymin = 0, ymax = value, fill = name),
alpha = .5) +
scale_colour_manual(values = vecColours) +
scale_fill_manual(values = vecColours) +
ylab("Probability of score") +
xlab("Score") +
ggtitle("Plot of probabilities of scores for help-seeking and non-help-seeking scores",
subtitle = "Uses your referential mean and SD and score limits and Gaussian model.") +
theme_bw() +
theme(plot.title = element_text(hjust = .5),
plot.subtitle = element_text(hjust = .5)) -> p
return(p)
}
plotCSC(.76, .59, 1.86, .75, 0, 4)
?pnorm
getMissClass <- function(meanNHS, SDNHS, meanHS, SDHS) {
CSC <- (SDHS * meanNHS + SDNHS * meanHS) / (SDNHS + SDHS)
pNHS <- pnorm(CSC, mean = meanNHS, sd = SDNHS)
pNHS
}
getMissClass(.76, .59, 1.86, .75)
getMissClass <- function(meanNHS, SDNHS, meanHS, SDHS) {
CSC <- (SDHS * meanNHS + SDNHS * meanHS) / (SDNHS + SDHS)
pNHS <- pnorm(CSC, mean = meanNHS, sd = SDNHS, lower.tail = FALSE)
pNHS
}
getMissClass(.76, .59, 1.86, .75)
getMissClass <- function(meanNHS, SDNHS, meanHS, SDHS) {
CSC <- (SDHS * meanNHS + SDNHS * meanHS) / (SDNHS + SDHS)
pNHS <- pnorm(CSC, mean = meanNHS, sd = SDNHS, lower.tail = FALSE)
pHS <- pnorm(CSC, mean = meanHS, sd = SDHS, lower.tail = TRUE)
c(pNHS, pHS)
}
getMissClass(.76, .59, 1.86, .75)
runApp('apps/CSC1')
?validate
runApp('apps/CSC1')
runApp('apps/CSC1')
getMissClass <- function(meanNHS, SDNHS, meanHS, SDHS) {
CSC <- (SDHS * meanNHS + SDNHS * meanHS) / (SDNHS + SDHS)
if (meanNHS < meanHS) {
pNHS <- pnorm(CSC, mean = meanNHS, sd = SDNHS, lower.tail = FALSE)
pHS <- pnorm(CSC, mean = meanHS, sd = SDHS, lower.tail = TRUE)
} else {
pNHS <- pnorm(CSC, mean = meanNHS, sd = SDNHS, lower.tail = TRUE)
pHS <- pnorm(CSC, mean = meanHS, sd = SDHS, lower.tail = FALSE)
}
c(pNHS, pHS)
}
getMissClass(.76, .59, 1.86, .75)
getMissClass(1.86, .75, .76, .59)
?reactive
runApp('apps/CSC1')
?includeHTML
?templateHTML
?htmlTemplate
shiny::runApp('apps/Screening')
library("shinyvalidate")
install.packages("shinyvalidate")
library("shinyvalidate")
?shinyvalidate
??shinyvalidate
shiny::runApp('apps/RCI2')
runApp('apps/CISD')
remotes::install_github("Appsilon/shiny.telemetry", dependencies = TRUE)
?shiny.telemetry::Telemetry
libPath
?sessionInfo
sessionInfo()
.libPaths()
# library(plotly)
suppressMessages(library(CECPfuns))
plotCIPearson()
plotCIPearson(.7, 70)
plotCIPearson(.7, 10, 100)
remotes::install_github("cpsyctc/CECPfuns", build_vignettes = TRUE)
# library(plotly)
suppressMessages(library(CECPfuns))
plotCIPearson(.7, 10, 100)
shiny::runApp('apps/CIcorrelation')
runApp('apps/plotCIPearson')
runApp('apps/plotCIPearson')
runApp('apps/plotCIPearson')
runApp('apps/plotCIPearson')
runApp('apps/CImean')
runApp('apps/CImean')
library(digest)
aes256key       <- hextextToRaw("000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f")
?hextexToRaw
hextextToRaw <- function(text) {
vals <- matrix(as.integer(as.hexmode(strsplit(text, "")[[1]])), ncol=2, byrow=TRUE)
vals <- vals %*% c(16, 1)
as.raw(vals)
}
aes256key       <- hextextToRaw("000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f")
aes256output     <- hextextToRaw("8ea2b7ca516745bfeafc49904b496089")
aes <- AES(aes256key)
aes256 <- aes$encrypt(plaintext)
plaintext       <- hextextToRaw("00112233445566778899aabbccddeeff")
aes256key       <- hextextToRaw("000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f")
aes256output     <- hextextToRaw("8ea2b7ca516745bfeafc49904b496089")
aes <- AES(aes256key)
aes256 <- aes$encrypt(plaintext)
stopifnot(identical(aes256, aes256output))
stopifnot(identical(plaintext, aes$decrypt(aes256, raw=TRUE)))
plaintext
aes$encrypt("Sausages")
msg <- as.raw(c(1:16, 1:16))
msg
?as.raw
as.raw("Sausages")
cli::hash_sha256("Chris")
library(encryptr)
install.packages("encryptr")
library(encryptr)
?genkeys
genkeys()
setwd()
getwd()
getwd()
setwd("/home/chris/")
library(encryptr)
genkeys()
encrypt("Chris Evans")
tibble(name = c("Chris Evans", "Jo-anne Caryle")) %>% encrypt(name)
library(tidyverse)
tibble(name = c("Chris Evans", "Jo-anne Caryle")) %>% encrypt(name)
tibble(name = c("Chris Evans", "Jo-anne Caryle")) %>% encrypt(name) %>% mutate(length = nchar(name))
library(CECPfuns)
?`CECPfuns-package`
?`CECPfuns-package`
library(CECPfuns)
getCISpearman(.5, 50, Gaussian = FALSE, FHP = FALSE)
getCISpearman(.5, 50, Gaussian = FALSE, FHP = TRUE)
getCISpearman(.5, 50, Gaussian = TRUE, FHP = FALSE)
