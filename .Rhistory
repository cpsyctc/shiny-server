geom_point() +
geom_smooth() +
geom_hline(yintercept = tmpMedian) +
ylab("Residual: PF regressed on NF") +
scale_x_continuous(name = "estadosalud",
breaks = 1:10)
vecPredVars
tmpPlot("toma_medicam")
tmpTib %>%
filter(name == "satisfechovida") %>%
mutate(value = ordered(value,
levels = as.character(1:10))) -> tmpTib2
tmpTib2 %>%
summarise(tmpMedian = median(residPFonNF)) %>%
pull() -> tmpMedian
ggplot(data = tmpTib2,
aes(x = value, y = residPFonNF)) +
geom_boxplot(varwidth = TRUE, notch = TRUE) +
geom_hline(yintercept = tmpMedian) +
ylab("Residual: PF regressed on NF") +
xlab("satisfechovida")
ggplot(data = tmpTib2,
aes(x = as.numeric(value), y = residPFonNF)) +
geom_point() +
geom_smooth() +
geom_hline(yintercept = tmpMedian) +
ylab("Residual: PF regressed on NF") +
scale_x_continuous(name = "satisfechovida",
breaks = 1:10)
library(shiny)
?numericInput
runApp('apps/Cronbach1Feldt')
runApp('apps/Cronbach1Feldt')
runApp('apps/Cronbach1Feldt')
runApp('apps/CIproportion')
runApp('apps/CIdiff2proportions')
runApp('apps/CImean')
?regexp
checkVector <- function(vecChar){
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\;", ",")
checkVector("1; 2;; 3")
checkVector <- function(vecChar){
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\;", ",")
checkVector <- function(vecChar){
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
}
checkVector("1; 2;; 3")
checkVector <- function(vecChar){
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar
}
checkVector("1; 2;; 3")
checkVector <- function(vecChar){
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
vecChar
}
checkVector("1; 2;; 3")
checkVector("1; 2;;; 3")
checkVector("1; 2, 3,,,")
checkVector <- function(vecChar){
if(str_detect(veChar, "[:alpha:]")) {
stop("Your input can contain only numbers, spaces, commas and semicolons")
}
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
vecChar
}
checkVector("1; a;; 3")
checkVector <- function(vecChar){
if(str_detect(vecChar, "[:alpha:]")) {
stop("Your input can contain only numbers, spaces, commas and semicolons")
}
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
vecChar
}
checkVector("1; a;; 3")
checkVector("1; 2;; 3")
checkVector("1; 2;;; 3")
checkVector("1; 2, 3,,,")
checkVector <- function(vecChar){
if(str_detect(vecChar, "[:alpha:]")) {
stop("Your input can contain only numbers, spaces, commas and semicolons")
}
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
vecChar <- str_replace_all(vecChar, "[:space:]", "")
}
checkVector("1; a;; 3")
checkVector("1; 2;; 3")
checkVector("1; 2;;; 3")
checkVector("1; 2, 3,,,")
checkVector <- function(vecChar){
if(str_detect(vecChar, "[:alpha:]")) {
stop("Your input can contain only numbers, spaces, commas and semicolons")
}
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
vecChar <- str_replace_all(vecChar, "[[:space:]]", "")
}
checkVector("1; a;; 3")
checkVector("1; 2;; 3")
checkVector("1; 2;;; 3")
checkVector("1; 2, 3,,,")
checkVector <- function(vecChar){
if(str_detect(vecChar, "[:alpha:]")) {
stop("Your input can contain only numbers, spaces, commas and semicolons")
}
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
vecChar <- str_replace_all(vecChar, "[[:space:]]*", "")
}
checkVector("1; a;; 3")
checkVector("1; 2;; 3")
checkVector("1; 2;;; 3")
checkVector <- function(vecChar){
if(str_detect(vecChar, "[:alpha:]")) {
stop("Your input can contain only numbers, spaces, commas and semicolons")
}
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
vecChar <- str_replace_all(vecChar, "([:space:])*", "")
vecChar
}
checkVector("1; a;; 3")
checkVector("1; 2;; 3")
checkVector("1; 2;;; 3")
checkVector("1; 2, 3,,,")
checkVector <- function(vecChar){
if(str_detect(vecChar, "[:alpha:]")) {
stop("Your input can contain only numbers, spaces, commas and semicolons")
}
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
vecChar <- str_replace_all(vecChar, "([:space:])*", "")
as.numeric(vecChar)
}
checkVector("1; a;; 3")
checkVector("1; 2;; 3")
checkVector("1; 2;;; 3")
checkVector <- function(vecChar){
if(str_detect(vecChar, "[:alpha:]")) {
stop("Your input can contain only numbers, spaces, commas and semicolons")
}
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
vecChar <- str_replace_all(vecChar, "([:space:])*", "")
print(vecChar)
as.numeric(vecChar)
}
checkVector("1; a;; 3")
checkVector("1; 2;; 3")
checkVector <- function(vecChar){
if(str_detect(vecChar, "[:alpha:]")) {
stop("Your input can contain only numbers, spaces, commas and semicolons")
}
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
vecChar <- str_replace_all(vecChar, "([:space:])*", "")
vecChar <- unlist(split(vecChar, ","))
print(vecChar)
as.numeric(vecChar)
}
checkVector("1; a;; 3")
checkVector("1; 2;; 3")
checkVector("1,2,3")
checkVector <- function(vecChar){
if(str_detect(vecChar, "[:alpha:]")) {
stop("Your input can contain only numbers, spaces, commas and semicolons")
}
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
vecChar <- str_replace_all(vecChar, "([:space:])*", "")
vecChar <- unlist(strsplit(vecChar, ","))
print(vecChar)
as.numeric(vecChar)
}
checkVector("1; a;; 3")
checkVector("1,2,3")
checkVector("1, 2, 3")
checkVector("1; 2;; 3")
checkVector("1; 2;;; 3")
checkVector("1; 2, 3,,,")
runApp('apps/ECDFplot')
###
### start with validation functions
###
checkVector <- function(vecChar){
if(str_detect(vecChar, "[:alpha:]*")) {
stop("Your input can contain only numbers, spaces, commas and semicolons")
}
}
checkVector("")
checkVector("a")
###
### start with validation functions
###
checkVector <- function(vecChar){
print(vecChar)
if(str_detect(vecChar, "[:alpha:]*")) {
stop("Your input can contain only numbers, spaces, commas and semicolons")
}
}
checkVector("a")
checkVector("1")
checkVector(1)
###
### start with validation functions
###
checkVector <- function(vecChar){
print(vecChar)
if(str_detect(vecChar, "([:alpha:])*")) {
stop("Your input can contain only numbers, spaces, commas and semicolons")
}
}
checkVector(1)
###
### start with validation functions
###
checkVector <- function(vecChar){
print(vecChar)
if(str_detect(vecChar, "([[:alpha:])*")) {
stop("Your input can contain only numbers, spaces, commas and semicolons")
}
}
###
### start with validation functions
###
checkVector <- function(vecChar){
print(vecChar)
if(str_detect(vecChar, "([[:alpha:])*")) {
stop("Your input can contain only numbers, spaces, commas and semicolons")
}
}
checkVector(1)
###
### start with validation functions
###
checkVector <- function(vecChar){
print(vecChar)
if(str_detect(vecChar, "([[:alpha:]])*")) {
stop("Your input can contain only numbers, spaces, commas and semicolons")
}
}
checkVector(1)
str_detect("a", "[:alpha:]")
str_detect("1", "[:alpha:]")
str_detect("1a", "[:alpha:]")
###
### start with validation functions
###
checkVector <- function(vecChar){
print(vecChar)
if (str_detect(vecChar, "[:alpha:]")) {
stop("Your input can contain only numbers, spaces, commas and semicolons")
}
}
checkVector(1)
checkVector("a")
checkVector("1, 2")
runApp('apps/ECDFplot')
###
### start with validation functions
###
checkVector <- function(vecChar){
print(vecChar)
if (str_detect(vecChar, "[:alpha:]")) {
stop("Your input can contain only numbers, spaces, commas and semicolons")
}
}
checkVector("")
runApp('apps/ECDFplot')
stringToNumericVector <- function(vecChar) {
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
vecChar <- str_replace_all(vecChar, "([:space:])*", "")
vecChar <- unlist(strsplit(vecChar, ","))
as.numeric(vecChar)
}
stringToNumericVector(1:3)
stringToNumericVector("1 2 3")
stringToNumericVector <- function(vecChar) {
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
vecChar <- str_replace_all(vecChar, "([:space:])*", "")
vecChar <- unlist(strsplit(vecChar, ","))
print(vecChar)
as.numeric(vecChar)
}
stringToNumericVector("1 2 3")
stringToNumericVector <- function(vecChar) {
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
vecChar <- str_replace_all(vecChar, "([:space:])+", "")
vecChar <- unlist(strsplit(vecChar, ","))
print(vecChar)
as.numeric(vecChar)
}
stringToNumericVector("1 2 3")
stringToNumericVector <- function(vecChar) {
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
vecChar <- str_replace_all(vecChar, "([:space:])+", "")
print(vecChar)
vecChar <- unlist(strsplit(vecChar, ","))
print(vecChar)
as.numeric(vecChar)
}
stringToNumericVector("1 2 3")
stringToNumericVector <- function(vecChar) {
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
vecChar <- str_replace_all(vecChar, "([:space:])+", ",")
print(vecChar)
vecChar <- unlist(strsplit(vecChar, ","))
print(vecChar)
as.numeric(vecChar)
}
stringToNumericVector("1 2 3")
runApp('apps/ECDFplot')
?plotQuantileCIsfromDat
runApp('apps/ECDFplot')
runApp('apps/ECDFplot')
runApp('apps/ECDFplot')
stringToNumericVector2 <- function(vecChar) {
print("2")
print(vecChar)
vecChar <- str_squish(vecChar)
print(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
vecChar <- str_replace_all(vecChar, "([:space:])+", ",")
vecChar <- unlist(strsplit(vecChar, ","))
as.numeric(vecChar)
}
stringToNumericVector2("a")
stringToNumericVector2(".05, .1, .25")
stringToNumericVector2 <- function(vecChar) {
print(vecChar)
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
print(vecChar)
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
vecChar <- str_replace_all(vecChar, "([:space:])+", ",")
vecChar <- unlist(strsplit(vecChar, ","))
as.numeric(vecChar)
}
stringToNumericVector2(".05, .1, .25")
stringToNumericVector2 <- function(vecChar) {
print(vecChar)
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
print(vecChar)
vecChar <- str_replace_all(vecChar, "([:space:])+", ",")
vecChar <- unlist(strsplit(vecChar, ","))
as.numeric(vecChar)
}
stringToNumericVector2(".05, .1, .25")
stringToNumericVector2 <- function(vecChar) {
print(vecChar)
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
print(vecChar)
vecChar <- str_replace_all(vecChar, ",([:space:])+", ",")
vecChar <- unlist(strsplit(vecChar, ","))
as.numeric(vecChar)
}
stringToNumericVector2(".05, .1, .25")
runApp('apps/ECDFplot')
stringToNumericVector1 <- function(vecChar) {
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
vecChar <- str_replace_all(vecChar, ",([:space:])+", ",")
vecChar <- unlist(strsplit(vecChar, ","))
as.numeric(vecChar)
}
stringToNumericVector1(1:3)
str(stringToNumericVector1(1:3))
str(stringToNumericVector1("1, 2, 3"))
str(stringToNumericVector1("1 2 3"))
stringToNumericVector1 <- function(vecChar) {
print(vecChar)
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
vecChar <- str_replace_all(vecChar, ",([:space:])+", ",")
vecChar <- unlist(strsplit(vecChar, ","))
as.numeric(vecChar)
}
str(stringToNumericVector1("1 2 3"))
stringToNumericVector1 <- function(vecChar) {
vecChar <- str_squish(vecChar)
print(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
vecChar <- str_replace_all(vecChar, ",([:space:])+", ",")
vecChar <- unlist(strsplit(vecChar, ","))
as.numeric(vecChar)
}
stringToNumericVector2 <- function(vecChar) {
print(vecChar)
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
print(vecChar)
vecChar <- str_replace_all(vecChar, ",([:space:])+", ",")
vecChar <- unlist(strsplit(vecChar, ","))
as.numeric(vecChar)
}
str(stringToNumericVector1("1 2 3"))
stringToNumericVector1 <- function(vecChar) {
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
print(vecChar)
vecChar <- str_replace_all(vecChar, ",([:space:])+", ",")
vecChar <- unlist(strsplit(vecChar, ","))
as.numeric(vecChar)
}
str(stringToNumericVector1("1 2 3"))
stringToNumericVector1 <- function(vecChar) {
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
vecChar <- str_replace_all(vecChar, ",([:space:])+", ",")
print(vecChar)
vecChar <- unlist(strsplit(vecChar, ","))
as.numeric(vecChar)
}
str(stringToNumericVector1("1 2 3"))
str(stringToNumericVector1("1, 2, 3"))
str(stringToNumericVector1("1 2 3"))
str(stringToNumericVector1("1; 2, 3"))
str(stringToNumericVector1("1; 2; 3"))
str(stringToNumericVector1("1 2 3"))
stringToNumericVector1 <- function(vecChar) {
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
print(vecChar)
vecChar <- str_replace_all(vecChar, ",([:space:])+", ",")
print(vecChar)
vecChar <- unlist(strsplit(vecChar, ","))
as.numeric(vecChar)
}
str(stringToNumericVector1("1 2 3"))
stringToNumericVector1 <- function(vecChar) {
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
print(vecChar)
vecChar <- str_replace_all(vecChar, ",([:space:])+", ",")
vecChar <- str_replace_all(vecChar, "([:space:])+", ",")
print(vecChar)
vecChar <- unlist(strsplit(vecChar, ","))
as.numeric(vecChar)
}
str(stringToNumericVector1("1 2 3"))
str(stringToNumericVector1("1 2  3"))
str(stringToNumericVector1("1, 2, ,  3"))
runApp('apps/ECDFplot')
runApp('apps/ECDFplot')
args(plotQuantileCIsfromDat)
runApp('apps/ECDFplot')
###
### start with validation functions
###
checkVector <- function(vecChar){
if (str_detect(vecChar, "[:alpha:]")) {
return(FALSE)
}
return(TRUE)
}
checkVector(1 2 3)
checkVector("1 2 3")
checkVector("1 2 -3")
checkVector(""x"
runApp('apps/ECDFplot')
runApp('apps/ECDFplot')
runApp('apps/ECDFplot')
shiny::runApp('apps/ECDFplot')
library(shiny)
?reactive
runApp('apps/Screening')
runApp('apps/CIproportion')
shiny::runApp('apps/Screening')
135/900
runApp('apps/Screening')
