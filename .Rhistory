}
checkVector("1; a;; 3")
checkVector("1; 2;; 3")
checkVector("1; 2;;; 3")
checkVector <- function(vecChar){
if(str_detect(vecChar, "[:alpha:]")) {
stop("Your input can contain only numbers, spaces, commas and semicolons")
}
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
vecChar <- str_replace_all(vecChar, "([:space:])*", "")
print(vecChar)
as.numeric(vecChar)
}
checkVector("1; a;; 3")
checkVector("1; 2;; 3")
checkVector <- function(vecChar){
if(str_detect(vecChar, "[:alpha:]")) {
stop("Your input can contain only numbers, spaces, commas and semicolons")
}
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
vecChar <- str_replace_all(vecChar, "([:space:])*", "")
vecChar <- unlist(split(vecChar, ","))
print(vecChar)
as.numeric(vecChar)
}
checkVector("1; a;; 3")
checkVector("1; 2;; 3")
checkVector("1,2,3")
checkVector <- function(vecChar){
if(str_detect(vecChar, "[:alpha:]")) {
stop("Your input can contain only numbers, spaces, commas and semicolons")
}
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
vecChar <- str_replace_all(vecChar, "([:space:])*", "")
vecChar <- unlist(strsplit(vecChar, ","))
print(vecChar)
as.numeric(vecChar)
}
checkVector("1; a;; 3")
checkVector("1,2,3")
checkVector("1, 2, 3")
checkVector("1; 2;; 3")
checkVector("1; 2;;; 3")
checkVector("1; 2, 3,,,")
runApp('apps/ECDFplot')
###
### start with validation functions
###
checkVector <- function(vecChar){
if(str_detect(vecChar, "[:alpha:]*")) {
stop("Your input can contain only numbers, spaces, commas and semicolons")
}
}
checkVector("")
checkVector("a")
###
### start with validation functions
###
checkVector <- function(vecChar){
print(vecChar)
if(str_detect(vecChar, "[:alpha:]*")) {
stop("Your input can contain only numbers, spaces, commas and semicolons")
}
}
checkVector("a")
checkVector("1")
checkVector(1)
###
### start with validation functions
###
checkVector <- function(vecChar){
print(vecChar)
if(str_detect(vecChar, "([:alpha:])*")) {
stop("Your input can contain only numbers, spaces, commas and semicolons")
}
}
checkVector(1)
###
### start with validation functions
###
checkVector <- function(vecChar){
print(vecChar)
if(str_detect(vecChar, "([[:alpha:])*")) {
stop("Your input can contain only numbers, spaces, commas and semicolons")
}
}
###
### start with validation functions
###
checkVector <- function(vecChar){
print(vecChar)
if(str_detect(vecChar, "([[:alpha:])*")) {
stop("Your input can contain only numbers, spaces, commas and semicolons")
}
}
checkVector(1)
###
### start with validation functions
###
checkVector <- function(vecChar){
print(vecChar)
if(str_detect(vecChar, "([[:alpha:]])*")) {
stop("Your input can contain only numbers, spaces, commas and semicolons")
}
}
checkVector(1)
str_detect("a", "[:alpha:]")
str_detect("1", "[:alpha:]")
str_detect("1a", "[:alpha:]")
###
### start with validation functions
###
checkVector <- function(vecChar){
print(vecChar)
if (str_detect(vecChar, "[:alpha:]")) {
stop("Your input can contain only numbers, spaces, commas and semicolons")
}
}
checkVector(1)
checkVector("a")
checkVector("1, 2")
runApp('apps/ECDFplot')
###
### start with validation functions
###
checkVector <- function(vecChar){
print(vecChar)
if (str_detect(vecChar, "[:alpha:]")) {
stop("Your input can contain only numbers, spaces, commas and semicolons")
}
}
checkVector("")
runApp('apps/ECDFplot')
stringToNumericVector <- function(vecChar) {
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
vecChar <- str_replace_all(vecChar, "([:space:])*", "")
vecChar <- unlist(strsplit(vecChar, ","))
as.numeric(vecChar)
}
stringToNumericVector(1:3)
stringToNumericVector("1 2 3")
stringToNumericVector <- function(vecChar) {
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
vecChar <- str_replace_all(vecChar, "([:space:])*", "")
vecChar <- unlist(strsplit(vecChar, ","))
print(vecChar)
as.numeric(vecChar)
}
stringToNumericVector("1 2 3")
stringToNumericVector <- function(vecChar) {
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
vecChar <- str_replace_all(vecChar, "([:space:])+", "")
vecChar <- unlist(strsplit(vecChar, ","))
print(vecChar)
as.numeric(vecChar)
}
stringToNumericVector("1 2 3")
stringToNumericVector <- function(vecChar) {
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
vecChar <- str_replace_all(vecChar, "([:space:])+", "")
print(vecChar)
vecChar <- unlist(strsplit(vecChar, ","))
print(vecChar)
as.numeric(vecChar)
}
stringToNumericVector("1 2 3")
stringToNumericVector <- function(vecChar) {
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
vecChar <- str_replace_all(vecChar, "([:space:])+", ",")
print(vecChar)
vecChar <- unlist(strsplit(vecChar, ","))
print(vecChar)
as.numeric(vecChar)
}
stringToNumericVector("1 2 3")
runApp('apps/ECDFplot')
?plotQuantileCIsfromDat
runApp('apps/ECDFplot')
runApp('apps/ECDFplot')
runApp('apps/ECDFplot')
stringToNumericVector2 <- function(vecChar) {
print("2")
print(vecChar)
vecChar <- str_squish(vecChar)
print(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
vecChar <- str_replace_all(vecChar, "([:space:])+", ",")
vecChar <- unlist(strsplit(vecChar, ","))
as.numeric(vecChar)
}
stringToNumericVector2("a")
stringToNumericVector2(".05, .1, .25")
stringToNumericVector2 <- function(vecChar) {
print(vecChar)
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
print(vecChar)
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
vecChar <- str_replace_all(vecChar, "([:space:])+", ",")
vecChar <- unlist(strsplit(vecChar, ","))
as.numeric(vecChar)
}
stringToNumericVector2(".05, .1, .25")
stringToNumericVector2 <- function(vecChar) {
print(vecChar)
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
print(vecChar)
vecChar <- str_replace_all(vecChar, "([:space:])+", ",")
vecChar <- unlist(strsplit(vecChar, ","))
as.numeric(vecChar)
}
stringToNumericVector2(".05, .1, .25")
stringToNumericVector2 <- function(vecChar) {
print(vecChar)
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
print(vecChar)
vecChar <- str_replace_all(vecChar, ",([:space:])+", ",")
vecChar <- unlist(strsplit(vecChar, ","))
as.numeric(vecChar)
}
stringToNumericVector2(".05, .1, .25")
runApp('apps/ECDFplot')
stringToNumericVector1 <- function(vecChar) {
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
vecChar <- str_replace_all(vecChar, ",([:space:])+", ",")
vecChar <- unlist(strsplit(vecChar, ","))
as.numeric(vecChar)
}
stringToNumericVector1(1:3)
str(stringToNumericVector1(1:3))
str(stringToNumericVector1("1, 2, 3"))
str(stringToNumericVector1("1 2 3"))
stringToNumericVector1 <- function(vecChar) {
print(vecChar)
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
vecChar <- str_replace_all(vecChar, ",([:space:])+", ",")
vecChar <- unlist(strsplit(vecChar, ","))
as.numeric(vecChar)
}
str(stringToNumericVector1("1 2 3"))
stringToNumericVector1 <- function(vecChar) {
vecChar <- str_squish(vecChar)
print(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
vecChar <- str_replace_all(vecChar, ",([:space:])+", ",")
vecChar <- unlist(strsplit(vecChar, ","))
as.numeric(vecChar)
}
stringToNumericVector2 <- function(vecChar) {
print(vecChar)
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
print(vecChar)
vecChar <- str_replace_all(vecChar, ",([:space:])+", ",")
vecChar <- unlist(strsplit(vecChar, ","))
as.numeric(vecChar)
}
str(stringToNumericVector1("1 2 3"))
stringToNumericVector1 <- function(vecChar) {
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
print(vecChar)
vecChar <- str_replace_all(vecChar, ",([:space:])+", ",")
vecChar <- unlist(strsplit(vecChar, ","))
as.numeric(vecChar)
}
str(stringToNumericVector1("1 2 3"))
stringToNumericVector1 <- function(vecChar) {
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
vecChar <- str_replace_all(vecChar, ",([:space:])+", ",")
print(vecChar)
vecChar <- unlist(strsplit(vecChar, ","))
as.numeric(vecChar)
}
str(stringToNumericVector1("1 2 3"))
str(stringToNumericVector1("1, 2, 3"))
str(stringToNumericVector1("1 2 3"))
str(stringToNumericVector1("1; 2, 3"))
str(stringToNumericVector1("1; 2; 3"))
str(stringToNumericVector1("1 2 3"))
stringToNumericVector1 <- function(vecChar) {
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
print(vecChar)
vecChar <- str_replace_all(vecChar, ",([:space:])+", ",")
print(vecChar)
vecChar <- unlist(strsplit(vecChar, ","))
as.numeric(vecChar)
}
str(stringToNumericVector1("1 2 3"))
stringToNumericVector1 <- function(vecChar) {
vecChar <- str_squish(vecChar)
vecChar <- str_replace_all(vecChar, "\\;", ",")
vecChar <- str_replace_all(vecChar, "\\,\\,", ", ,")
print(vecChar)
vecChar <- str_replace_all(vecChar, ",([:space:])+", ",")
vecChar <- str_replace_all(vecChar, "([:space:])+", ",")
print(vecChar)
vecChar <- unlist(strsplit(vecChar, ","))
as.numeric(vecChar)
}
str(stringToNumericVector1("1 2 3"))
str(stringToNumericVector1("1 2  3"))
str(stringToNumericVector1("1, 2, ,  3"))
runApp('apps/ECDFplot')
runApp('apps/ECDFplot')
args(plotQuantileCIsfromDat)
runApp('apps/ECDFplot')
###
### start with validation functions
###
checkVector <- function(vecChar){
if (str_detect(vecChar, "[:alpha:]")) {
return(FALSE)
}
return(TRUE)
}
checkVector(1 2 3)
checkVector("1 2 3")
checkVector("1 2 -3")
checkVector(""x"
runApp('apps/ECDFplot')
runApp('apps/ECDFplot')
runApp('apps/ECDFplot')
shiny::runApp('apps/ECDFplot')
library(shiny)
?reactive
runApp('apps/Screening')
runApp('apps/CIproportion')
shiny::runApp('apps/Screening')
135/900
runApp('apps/Screening')
shiny::runGist("c4db11d81f3c46a7c4a5")
100/5000
shiny::runApp('apps/CIcorrelation')
runApp('apps/CIcorrelation')
runApp('apps/CIcorrelation')
runApp('apps/RCI1')
shiny::runApp('apps/RCI1')
runApp('apps/RCI1')
runApp('apps/RCI1')
runApp('apps/RCI1')
runApp('apps/RCI1')
runApp('apps/RCI1')
runApp('apps/RCI1')
runApp('apps/RCI1')
runApp('apps/RCI1')
?renderPrint
runApp('apps/RCI1')
runApp('apps/RCI1')
runApp('apps/RCI1')
runApp('apps/RCI1')
runApp('apps/RCI1')
?qchisq
qchisq(.025, 1)
qchisq(.975, 1)
getCIaroundSD <- function(SD, n, ci = .95){
k <- n - 1
LCL <- 1 / sqrt(qchisq((1 - ci) / 2))
}
getCIaroundSD(1, 2)
getCIaroundSD <- function(SD, n, ci = .95){
k <- n - 1
LCL <- 1 / sqrt(qchisq((1 - ci) / 2), k)
}
getCIaroundSD(1, 2)
getCIaroundSD <- function(SD, n, ci = .95){
k <- n - 1
LCL <- 1 / sqrt(qchisq((1 - ci) / 2, k))
}
getCIaroundSD(1, 2)
getCIaroundSD <- function(SD, n, ci = .95){
k <- n - 1
LCL <- 1 / sqrt(qchisq((1 - ci) / 2, k))
LCL
}
getCIaroundSD(1, 2)
getCIaroundSD <- function(SD, n, ci = .95){
k <- n - 1
UCL <- 1 / sqrt(qchisq((1 - ci) / 2, k))
LCL <- 1 / sqrt(qchisq(1 - ((1 - ci) / 2), k))
LCL
}
getCIaroundSD(1, 2)
getCIaroundSD <- function(SD, n, ci = .95){
k <- n - 1
UCL <- SD * (1 / sqrt(qchisq((1 - ci) / 2, k)))
LCL <- SD * (1 / sqrt(qchisq(1 - ((1 - ci) / 2), k)))
retVec <- c(LCL, UCL, ci)
names(retVec) <- c("LCL", "UCL", "CI")
retVec
}
getCIaroundSD(1, 2)
getCIaroundSD <- function(SD, n, ci = .95, dp = 2){
### gives CI around an observed SD given n and desired CI width (ci)
### dp is decimal places desired
### based on https://en.wikipedia.org/wiki/Standard_deviation
k <- n - 1 # df for the chisq values for the probabilities at the ends of the CI
### confidence limits are just the SD multiplied by those values
UCL <- SD * (1 / sqrt(qchisq((1 - ci) / 2, k)))
LCL <- SD * (1 / sqrt(qchisq(1 - ((1 - ci) / 2), k)))
retVec <- c(LCL, UCL, ci)
names(retVec) <- c("LCL", "UCL", "CI")
round(retVec, dp)
}
getCIaroundSD(1, 2)
shiny::runApp('apps/RCI1')
runApp('apps/RCI1')
runApp('apps/RCI1')
runApp('apps/RCI1')
?system.file
runApp('apps/RCI1')
runApp('apps/RCI1')
runApp('apps/RCI1')
runApp('apps/RCI1')
runApp('apps/RCI1')
runApp('apps/RCI1')
runApp('apps/RCI1')
runApp('apps/RCI1')
shiny::runApp('apps/testing_templates')
runApp('apps/testing_templates')
runApp('apps/testing_templates')
runApp('apps/testing_templates')
runApp('apps/testing_templates')
shiny::runApp('apps/testing_templates')
runApp('apps/testing_templates')
shiny::runApp('apps/testing_templates')
runApp('apps/testing_templates')
runApp('apps/testing_templates')
runApp('apps/testing_templates')
runApp('apps/testing_templates')
runApp('apps/testing_templates')
runApp('apps/testing_templates')
runApp('apps/testing_templates')
shiny::runApp('apps/Screening')
shiny::runApp('apps/CISD')
ci <- .95
k <- 26
sqrt(qchisq((1 - ci) / 2, k)
)
qchisq((1 - ci) / 2, k)
runApp('apps/CISD')
qchisq(1 - ((1 - ci) / 2)
()
)
qchisq(1 - ((1 - ci) / 2))
qchisq(1 - ((1 - ci) / 2), 26)
runApp('apps/CISD')
runApp('apps/CISD')
k <- 26
SD <- 6.43
ci <- .95
qchisq((1 - ci) / 2, k)
qchisq(1 - ((1 - ci) / 2), k)
runApp('apps/CISD')
qchisq((1 - ci) / 2, k)
SD^2 * sqrt(k) / qchisq((1 - ci) / 2, k)
k
qchisq(1 - ((1 - ci) / 2), k)
sqrt(27-1)*6.432^2/41.923
runApp('apps/CISD')
sqrt(27-1)*6.432^2/13.844
sqrt(26)
6.432^2
5.099l0 * 41.37062 / 13.844
5.09900 * 41.37062 / 13.844
runApp('apps/CISD')
library("MKinfer")
install.packages("MKinfer")
MKinfer::sdCI(rnorm(5000),conf.level = .95, boot = FALSE, alternative = "two")
MKinfer::sdCI
runApp('apps/CISD')
SD <- 1
k <- 4999
ci <- .95
qchisq((1 - ci) / 2, k)
SD^2 * sqrt(k) / qchisq((1 - ci) / 2, k)
qchisq(1 - ((1 - ci) / 2), k)
SD^2 * sqrt(k) / qchisq(1 - ((1 - ci) / 2), k)
runApp('apps/CISD')
runApp('apps/CISD')
